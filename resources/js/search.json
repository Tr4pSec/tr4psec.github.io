[[{"l":"README","p":["GitHub followers GitHub User's stars Visitor","This website is my personal note-dump, mostly Cyber related."]},{"l":"About me","p":["\uD83C\uDFE2 I am currently working as a Cyber Security Specialist at KLP","\uD83C\uDFE2 Former Security Incident Handler at KONGSBERG Gruppen","\uD83C\uDF93 GIAC Certified Forensic Analyst Badge","\uD83C\uDF93 GIAC Penetration Tester Badge","\uD83C\uDFE1 Lives in Norway","\uD83D\uDEE1️ BlueTeamLabs Profile"]},{"i":"connect-with-me","l":"Connect with me ☕ :","p":["@illekreativ Facebook@anushkawijegoonawardana97 Twitter"]},{"l":"Skills"},{"i":"github-stats","l":"GitHub Stats \uD83D\uDCC8 :","p":["GitHub Streak Tr4pSec GitHub stats Top Langs"]},{"i":"github-thropies","l":"GitHub Thropies \uD83C\uDFC6 :","p":["trophy"]}],[{"l":"BlueTeamLabs","p":["Extracting hidden files with StegHide:","Extracting strings:","Python Script for extracting data from audio streams: Ref https://medium.com/analytics-vidhya/get-secret-message-from-audio-file-8769421205c3","python3 ./test.py","Morse Code Decoder: https://morsecode.world/international/decoder/audio-decoder-expert.html"]}],[{"l":"HackTheBox","p":["Hack The Box is an online platform allowing you to test your penetration testing skills and exchange ideas and methodologies with thousands of people in the security field.",":)","Link to HTB: http://hackthebox.eu/","Tools I use:","Kali Linux(Linux distro for pentesting)","Commando VM(Windows VM for pentesting)","Help resources:","IppSec(Youtube walkthrough videos)","The Cyber Mentor(Youtube tutorials)","Rapid7(Vulnerability & Exploit Database)","Exploit DB(Exploit Database)","Hack the Box Forums"]},{"l":"Kali Linux commands","p":["Connect over winrm","Connect over winrm, but with access to a folder and its files","Connect with psexec or smbexec using pass the hash","Crack a password hash","Cracking zipfile with fcrackzip:","Download all files from smbshare","Enumerate samba shares","Enumerating users with impacket","Finding open shares","FTP","Get password hash from user using kerberosting","Locate path of files","Mount a share","nmap for when you see rpcbind","Portscanning target with nmap","Query netbios names","Show shares","SMB Client","Using secretsdump to dump domain hashes (needs acc with DC SYNC permissions)","Windows enumeration"]}],[{"l":"Autopsy","p":["Autopsy is the premier end-to-end open source digital forensics platform. Built by Basis Technology with the core features you expect in commercial forensic tools, Autopsy is a fast, thorough, and efficient hard drive investigation solution that evolves with your needs.","Download Page: https://www.autopsy.com/download/","The Linux installer has installation instructions, follow them.","After installation you can run ./autopsy from the /bin/ folder."]}],[{"l":"Linux Logs"},{"i":"varlogmessages","l":"/var/log/messages"},{"i":"whats-logged-here","l":"What’s logged here?:","p":["This log file contains generic system activity logs. It is mainly used to store informational and non-critical system messages. In Debian-based systems, /var/log/syslog directory serves the same purpose."]},{"i":"how-can-i-use-these-logs","l":"How can I use these logs?:","p":["Here you can track non-kernel boot errors, application-related service errors and the messages that are logged during system startup. This is the first log file that the Linux administrators should check if something goes wrong. For example, you are facing some issues with the sound card. To check if something went wrong during the system startup process, you can have a look at the messages stored in this log file."]},{"i":"varlogauthlog","l":"/var/log/auth.log"},{"i":"whats-logged-here-1","l":"What’s logged here?","p":["All authentication related events in Debian and Ubuntu server are logged here. If you’re looking for anything involving the user authorization mechanism, you can find it in this log file."]},{"i":"how-can-i-use-these-logs-1","l":"How can I use these logs?:","p":["Suspect that there might have been a security breach in your server? Notice a suspicious javascript file where it shouldn’t be? If so, then find this log file asap!","Investigate failed login attempts Investigate brute-force attacks and other vulnerabilities related to user authorization mechanism."]},{"i":"varlogsecure","l":"/var/log/secure"},{"i":"redhat-and-centos-based-systems-use-this-log-file-instead-of-var-log-auth-log","l":"RedHat and CentOS based systems use this log file instead of /var/log/auth.log.","p":["It is mainly used to track the usage of authorization systems. It stores all security related messages including authentication failures. It also tracks sudo logins, SSH logins and other errors logged by system security services daemon."]},{"i":"how-can-i-use-these-logs-2","l":"How can I use these logs?:","p":["All user authentication events are logged here. This log file can provide detailed insight about unauthorized or failed login attempts Can be very useful to detect possible hacking attempts. It also stores information about successful logins and tracks the activities of valid users."]},{"i":"varlogbootlog","l":"/var/log/boot.log"},{"i":"whats-logged-here-2","l":"What’s logged here?","p":["The system initialization script, /etc/init.d/bootmisc.sh, sends all bootup messages to this log file This is the repository of booting related information and messages logged during system startup process."]},{"i":"how-can-i-use-these-logs-3","l":"How can I use these logs?:","p":["You should analyze this log file to investigate issues related to improper shutdown, unplanned reboots or booting failures. Can also be useful to determine the duration of system downtime caused by an unexpected shutdown."]},{"i":"varlogdmesg","l":"/var/log/dmesg"},{"i":"whats-logged-here-3","l":"What’s logged here?","p":["This log file contains Kernel ring buffer messages. Information related to hardware devices and their drivers are logged here. As the kernel detects physical hardware devices associated with the server during the booting process, it captures the device status, hardware errors and other generic messages."]},{"i":"how-can-i-use-these-logs-4","l":"How can I use these logs?:","p":["This log file is useful for dedicated server customers mostly. If a certain hardware is functioning improperly or not getting detected, then you can rely on this log file to troubleshoot the issue. Or, you can purchase a managed server from us and we’ll monitor it for you."]},{"i":"varlogkernlog","l":"/var/log/kern.log"},{"i":"whats-logged-here-4","l":"What’s logged here?","p":["This is a very important log file as it contains information logged by the kernel."]},{"i":"how-can-i-use-these-logs-5","l":"How can I use these logs?:","p":["Perfect for troubleshooting kernel related errors and warnings. Kernel logs can be helpful to troubleshoot a custom-built kernel. Can also come handy in debugging hardware and connectivity issues."]},{"i":"varlogfaillog","l":"/var/log/faillog"},{"i":"whats-logged-here-5","l":"What’s logged here?","p":["This file contains information on failed login attempts."]},{"i":"how-can-i-use-these-logs-6","l":"How can I use these logs?:","p":["It can be a useful log file to find out any attempted security breaches involving username/password hacking and brute-force attacks."]},{"i":"varlogcron","l":"/var/log/cron"},{"i":"whats-logged-here-6","l":"What’s logged here?","p":["This log file records information on cron jobs."]},{"i":"how-can-i-use-these-logs-7","l":"How can I use these logs","p":["Whenever a cron job runs, this log file records all relevant information including successful execution and error messages in case of failures. If you’re having problems with your scheduled cron, you need to check out this log file."]},{"i":"varlogyumlog","l":"/var/log/yum.log"},{"i":"whats-logged-here-7","l":"What’s logged here?","p":["It contains the information that is logged when a new package is installed using the yum command."]},{"i":"how-can-i-use-these-logs-8","l":"How can I use these logs?:","p":["Track the installation of system components and software packages. Check the messages logged here to see whether a package was correctly installed or not. Helps you troubleshoot issues related to software installations.","Suppose your server is behaving unusually and you suspect a recently installed software package to be the root cause for this issue. In such cases, you can check this log file to find out the packages that were installed recently and identify the malfunctioning program."]},{"i":"varlogmaillog-or-varlogmaillog","l":"/var/log/maillog or /var/log/mail.log"},{"i":"whats-logged-here-8","l":"What’s logged here?","p":["All mail server related logs are stored here."]},{"i":"how-can-i-use-these-logs-9","l":"How can I use these logs?","p":["Find information about postfix, smtpd, MailScanner, SpamAssassain or any other email related services running on the mail server. Track all the emails that were sent or received during a particular period Investigate failed mail delivery issues. Get information about possible spamming attempts blocked by the mail server. Trace the origin of an incoming email by scrutinizing this log file."]},{"i":"varloghttpd","l":"var/log/httpd/"},{"i":"whats-logged-here-9","l":"What’s logged here?","p":["This directory contains the logs recorded by the Apache server. Apache server logging information are stored in two different log files – error_log and access_log."]},{"i":"how-can-i-use-these-logs-10","l":"How can I use these logs?:","p":["The error_log contains messages related to httpd errors such as memory issues and other system related errors. This is the place where Apache server writes events and error records encountered while processing httpd requests. If something goes wrong with the Apache webserver, check this log for diagnostic information. Besides the error-log file, Apache also maintains a separate list of access_log. All access requests received over HTTP are stored in the access_log file. Helps you keep track of every page served and every file loaded by Apache. Logs the IP address and user ID of all clients that make connection requests to the server. Stores information about the status of the access requests, – whether a response was sent successfully or the request resulted in a failure."]},{"i":"varlogmysqldlog-or-varlogmysqllog","l":"/var/log/mysqld.log or /var/log/mysql.log"},{"i":"whats-logged-here-10","l":"What’s logged here?","p":["As the name suggests, this is the MySQL log file. All debug, failure and success messages related to the [mysqld] and [mysqld_safe] daemon are logged to this file. RedHat, CentOS and Fedora stores MySQL logs under /var/log/mysqld.log, while Debian and Ubuntu maintains the log in /var/log/mysql.log directory."]},{"i":"how-can-i-use-this-log","l":"How can I use this log?","p":["Use this log to identify problems while starting, running, or stopping mysqld. Get information about client connections to the MySQL data directory You can also setup ‘long_query_time’ parameter to log information about query locks and slow running queries."]}],[{"l":"Linux Notes","p":["Compromise assessment Cheat Sheet: https://sandflysecurity.com/linux-compromise-detection-command-cheatsheet.pdf","Checking for active network connections","List all ports listening:","Checking running services:","See details of PID:","Parsing logs:","Parsing .gz logs:"]}],[{"l":"Troubleshooting boot times in Linux","p":["My Linux Mint installation took forever to boot one day, and I had to figure out how to solve it. This is what I found:","You can run systemd-analyze to see startup information:","You can also run systemd-analyze blame to see what took the most time.","The systemctl command showed me an error about a service failing.","In my case there was a service called systemd-udev-settle that loaded forever until it failed.","I searched online and found out that this service wasn't needed for the system to run. So I found a command to \"disable it\": sudo systemctl mask systemd-udev-settle","This fixed my super long boot time \uD83D\uDC4D"]}],[{"l":"Creating your own PowerShell profile","p":["PowerShell provides a great way of making the shell \"your own\" by using profile scripts. These are basically a .ps1 script that loads every time you open the shell.","I usually customize the shell background, change the starting directory, load modules or add custom functions to my profile. I'm gonna show you how to get up and running with your own PowerShell profile-script.","If you want to learn more about Profiles, please see help about_profiles in your shell.","The first thing you might want to do is to check if you already have a profile script or not. You can check this by running:","If Test-Path $Profile returns False, you don't have a profile created. You can then create your profile by running:","Now if you run Test-Path $Profile again it should return True.","You can open up your profile script by running ise $Profile(or code $Profile if you have Visual Studio Code installed).","You can find my PowerShell profile here. You can paste this into your profile and play around with it.","My profile adds two custom functions: One that rolls a dice, and one that fetches a random excuse from a webpage. It also changes the background and foreground color of the shell, changes the prompt, changes the starting directory and adds a nice ASCII alien head.","I think I'm gonna try to use this blog as my personal PowerShell/Security notebook, while writing in a way that can benefit others.","I know there's no screenshots in this post, and the topic is pretty boring unless you've never heard of PowerShell profiles before but it's a start! Another post is scheduled for tomorrow.","If you have any suggestions or questions drop a comment.","// Tr4p"]}],[{"l":"CSV Files in PowerShell","p":["(Again, if you don't know what {$_.port -ne '80'} means, check out my previous post.)","// Tr4p","Alright. That was my very short, but very straight forward write-up on how to read CSV-files in PowerShell. I hope you found this post helpful.","Back to our CSV-file: :Let's say that we only want to display the events where the traffic was allowed. We would then run:","Besides using Where-Object to filter out the data, you can also use Sort-Object to sort the data. Say we wanted to sort on the action property. We would run this:","If we pipe our $data variable into Get-Member we can see what kind of properties and methods we have available. (Properties being the most interesting right now.)","If you work in IT, you have most likely stumbled upon a CSV-file. CSV stands for Comma-separated values. You can read more about CSV-files here.","In order to read this CSV-file in PowerShell, we'll have to use the Import-CSV cmdlet. If you don't know how to discover PowerShell commands, you can read about that in my previous post Discover Commands.","In this case the file is located under $home\\documents\\traffic.csv","Let's say you got a file called traffic.csv. The raw content of the file looks like this:","Notice that sourceIP, destinationIP, port and action are all available for us to play with. If you don't know how, check out my previous post Filtering and using Comparison operators in PowerShell.","Now if we just run our variable $data we'll see the contents of the file.","Please take note that everything in this post is done with PowerShell.exe, and some examples might not work in ISE or VSCode.","The parameter that we are adding is -Delimiter, delimiter is saying what character is separating the data within the CSV-file. In our example it's a comma.","There is a twist tho. First we need to create a variable that we assign the Import-CSV command to. By storing the output objects in a variable, we can more easily play around with the data:","Two IT-related examples of what data a CSV-file can contain would be a list of AD-users or network traffic. I'll use network traffic as my example. I'm not going to spend more time explaining what a CSV-file is, but I will show you how to read its content with PowerShell!","What if we want to see all the traffic that is not on port 80?","You can also combine these cmdlets:","You can also use Select-Object to select the properties you'd like:"]}],[{"l":"Discover commands","p":["(The verb list that Get-Verb returns might not be complete. For an updated list of approved Windows PowerShell verbs with descriptions, see the link above!)","(You can read more about wildcards in PowerShell by running get-help about_wildcards. Another useful Get-Help tip is the -ShowWindow parameter, which sometimes makes the help files easier to read.)","// Tr4p","Above, the first search is looking for commands that has the specific -Noun LocalUser.","As you can see, the description is pretty straight forward. But Get-Command has two very useful parameters: -Verb and -Noun.","because the -Noun parameter of Get-Command also accepts wildcard-input like Get-Help did.","From our previous Get-Help search, we could see that a lot of commands use the Noun LocalUser.","I have two main ways of discovering commands. Using Get-Help and Get-Command.","I've marked the most interesting ones. Now, all these results are the help files within Get-Help that contains \"user\" in one way or another. And if I wanted to read the specific help file of any of these commands, say for example Get-LocalUser, I would have to type-in:","In the second search we look for any -Noun that contains \"user\" in some way. Notice how we get more results?","Like I said, I'll do a longer post on using the Get-Help system later, but I suggest you read the help files of any command you are interested in. If you want to go more into detail, you can add the -full parameter:","Now let's take a look at using Get-Command instead.","PowerShell commands use a verb-noun syntax. This makes understanding and remembering (and guessing) PowerShell commands easier. Actually, PowerShell has a list of approved verbs. These can also be viewed in the Shell by running Get-Verb.","PowerShell has a excellent help system (I'll do a post specifically on Get-Help later!) that provides a detailed description, shows the syntax, shows examples etc. You can search through these help files using wildcards, and that's a really good way of discovering commands.","Secondly I'll show how to use Get-Command, which is a more straight forward way to list available commands.","So a easy way to list those same commands using Get-Command would be to run Get-Command and specifying the -Noun parameter like this:","The point of this post was to describe how I discover commands within PowerShell. Did I miss something? Should I have written/explained something in a different way? Do I seem drunk? Leave a comment!","to find relevant commands. This will list everything within the help files that contains \"user\".","With Get-Help you can search for anything you'd like using wildcards. Say for example I want to find out more about the local user accounts on my computer. I would run","You could also run","You could turn it around and search using the -Verb parameter too, for example:"]}],[{"l":"Filtering and using Comparison operators in PowerShell","p":["This time I figured I could do a write-up on how to filter data in PowerShell and make it display the information you want to see.","Please take note that everything in this post is done with PowerShell.exe, and some examples might not work in ISE or VSCode.","In PowerShell there are two main ways to filter out data:","Before we start exploring these two options, I'm going to tell you about a \"rule of thumb\" that I learned from reading the book \"Learning PowerShell in a month of lunches\" :","Filter left first.","What this means is that you always want to try and filter/limit the output of your commands as far left in the command as possible. The further left in the command you are able to filter out data, the less resources you are going to use on whatever device you are running commands on. This could be a normal endpoint, or a server. When scripting you always want to use as little resources as possible.","Now exploring the two different ways of filtering commands, I'll show you examples of filtering on the left side and using other cmdlets on the right."]},{"l":"Using a filter parameter in your first cmdlet","p":["The reason I'm writing \"a filter parameter\" and not \"the -filter parameter\" is because the parameter in cmdlets for filtering data is not always the same.","Lets look at this command as our first example:","Now say we want to filter our objects based on the Name property while \"filtering left\".","We start by looking at all the parameters of the Get-LocalGroup cmdlet by running","We see that Get-LocalGroup has a -Name parameter, and it accepts wildcards!","Now lets look back at our first Get-LocalGroup cmdlet. Say we want the Administrators group. We can use the -Name parameter we found to run:","If we want to be less specific and just filter for anything that contains admin(wildcards) we can run this instead:","Now lets look at the other way to filter objects."]},{"l":"Using other cmdlets to filter objects with comparison operators","p":["-eq does a \"Equal to\" comparison like we talked about above against the second object we threw into the script block which is a 'Administrators' string.","-eq(returns True when equal, returns False when not equal.)","-ge","-gt","-le","-lt","-ne(returns True when not equal, returns False when equal.)",".Name references the Name property of the current object.","// Tr4p","$_ is a reference to the current object in the pipeline (in this case all the localgroups).","Combined $_.Name references the name property of the local group objects.","Example 1: 'string' -eq 'string'(would return True)","Example 1: 'string' -ne 'hello'(would return True)","Example 2: 13 -eq 37(would return False)","Example 2: 3 -ne 3(would return False)","Greater than","Greater than or equal to","I hope you found this post useful!","I know that looks hard, so let me explain what happens:","I won't go trough how the command flows because it would be pretty much the same as the previous command. Except that we changed our comparison operator and we changed our second object to get the result we wanted.","If your first cmdlet doesn't provide with any parameter to filter out data, you can use another PowerShell cmdlet called Where-Object, but you'll need to know how to use comparison operators in order to effectively filter out the data you want.","In short, you use comparison parameters inside the Where-Object cmdlet in order to compare data. The comparison always returns a Boolean value: True or False.","Inside this script block, we pass our current object in.","Less than","Less than or equal to","Now as a last example I want to use the -Like comparison operator in order to be less specific. ( I wrote further up in the post where you can read about the -Like operator.)","Now let me show you some examples of using Where-Object and comparison operators to find the same Administrator group from before.","Our command then spits out objects where the Name property is equal to our string.","Phew..","Then we use a comparison operator and we write our second object so we have something to compare our first object to.","These are some of the comparison operators in PowerShell:","To read more about comparison operators and to see the full list, take a look at Get-Help about_Comparison_Operators. One of the operators I recommend reading about is -Like and -Contains.","When comparing strings using these comparison operators, PowerShell does not care about upper or lower case strings. It's all the same. If you want to be case sensitive, you can add a \"c\" in front of the operators. (For example -ceq or -cne.)","With Where-Object we use the -FilterScript parameter and add a script block","You run the Get-LocalGroup cmdlet and fetch ALL the local groups on the computer","You send all the objects from that command through the pipeline into our new Where-Object cmdlet"]}],[{"l":"How to create a PSCustomObject","p":["As I wrote in a previous blog post, everything in PowerShell are objects.","There is also a custom PowerShell object with the type PSCustomObject.","This post is just gonna be a quick and dirty \"How to\".","If you want to read the docs, you'll find them here.","\"Wraps an object providing alternate views of the available members and ways to extend them. Members can be methods, properties, parameterized properties, etc.\"","There are several ways of creating a PSCustomObject.","You can create it using New-Object and specifying PSCustomObject as the type:","You then add properties and data like shown above.","Another way of doing it is by declaring it as a PSCustomObject like this:","Now calling $myObject will show you your new object. And running Get-Member will show you that it's of the type System.Management.Automation.PSCustomObject.","That's it! :)","Quick and dirty post, I'll try to think of some good topics to do longer write-ups on later. This can be a good and quick reference page if you forget how to construct your custom objects!","// Tr4p ❤"]}],[{"l":"Objects in PowerShell","p":["// Tr4p","But what really are objects in PowerShell? The answer is \"pretty much everything\".","Every command you run in PowerShell returns an object, or an array of objects. If you don't know what an array is, it's basically a data type that contains a group of objects. You have tons of different types of objects. Don't think too hard about different object types, just know that every \"type\" of object is different. I'll show you how to check what kind of object you're dealing with.","First thing we see is the TypeName. This is basically telling you what type of object you're dealing with. A System.String object. Or just a String object for short.","If your goal was to actually change the object stored in the $Test variable, you would have to declare it again like this:","Let's try the ToUpper method:","Methods are invoked the same way, but they end with a ( ) after the method name. Some methods require input inside the ( ).","Next Get-Member lists all the Methods and Properties of the object.","Now I'm going to show you the most important command of them all:","Now if we just run $Test in our Shell, PowerShell returns \"This is a string.\".","Now listen, calling a method on a object does not change the object itself. It merely outputs a new modified version of the object. That means if you run $Test again after previously running the ToUpper method, you'll see that your string remains unchanged.","Now your $Test would look a bit different:","PowerShell is full of objects. And dealing with different types of objects is something you'll spend a lot of time doing if you want to get into PowerShell.","See what our ToUpper method did to our string?","So let's first focus on the Properties of our String Object. As you can see in the very long list above, this object only has one Property: Length. You can invoke properties by writing:","So let's pipe our $Test variable into Get-Member and see what we're dealing with:","So, every time you run a command in PowerShell, it returns an object. And that object has an object-type, properties and methods. Properties is something that describes the object, methods are \"actions\" or code that you can execute against the object.","This is my first time trying to explain objects in PowerShell in writing. If any of this didn't make sense, please let me know! I'll answer any question you might have on Twitter!","Time for an example! Let's create a variable called test and then assign a string to that variable:","Using Get-Help and Get-Command from my previous post Discover commands combined with looking at the Object type, properties and methods using Get-Member should make you a pretty great PowerShell explorer!","When you pipe something into Get-Member, PowerShell is gonna spit out what type of object you're dealing with, all the methods, and all the properties of the object."]}],[{"l":"Using the Azure module in PowerShell"},{"l":"Reference for Azure cmdlets","p":["Microsoft Doc","Install the module","Connect PowerShell to Azure","List all Resource Groups"]}]]